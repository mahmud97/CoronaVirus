@model Covid19Web.Solution.Models.Result
@*@model IEnumerable<Covid19Web.Solution.Models.Result>*@

@{
    ViewBag.Title = "Covid19Update";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2 style="margin-bottom:0px; text-align:center">Coronavirus Update</h2>

<style>

    /*fixed table head*/
    table thead tr th {
        background-color: #f5f242;
        /*position: sticky;*/
        /*I defined position here sticky but
        it overriden by data table so I have
        defined position: sticky; manually
        below in the table head inside th
        */
        z-index: 100;
        top: 0;
    }

    .myClass {
       color: #fc0303;
    }
    .fontstyle{
        font-weight:bold;

    }
</style>

@*<div class="input-group add-on">
        <input style="width:250px" class="form-control pull-right" placeholder="Search" name="srch-term" id="myInput" type="text">
        <div class="input-group-btn">
            <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
        </div>
    </div>
    <br />*@

<table class="table" id="header-fixed">
    <thead>
        <tr>
            <th style="position: sticky;">Country</strong></th>
            @*<th>Slug</strong></th>*@
            <th style="position: sticky;">Total Cases</strong></th>
            <th style="position: sticky;">New Cases</strong></th>
            <th style="position: sticky;">Total Deaths</strong></th>
            <th style="position: sticky;">New Deaths</strong></th>
            <th style="position: sticky;">Total Recovered</strong></th>
            <th style="position: sticky;">New Recovered</strong></th>




        </tr>
    </thead>


    @{

        int cntry = 0, totalcase = 0, newcase = 0, totaldeaths = 0, newdeaths = 0, totalrecovered = 0, newrecovered = 0;
    }
    <tbody id="myTable">
        @foreach (var data in Model.Countries)
        {
            if (!string.IsNullOrEmpty(data.Country))
            {
                <tr class="fontstyle">
                    <td>
                        @if (!string.IsNullOrEmpty(data.Country))   
                        {
                            @*@Html.DisplayFor(modelItem => data.Country)*@
                            @Html.ActionLink(data.Country, "CountryDetails", "Covid19",  new { uniqueIdentifier = data.Country }, null)
                            cntry++;
                        }
                    </td>
                   
                    <td>
                        @if (!string.IsNullOrEmpty(data.Country))
                        {
                            @Html.DisplayFor(modelItem => data.TotalConfirmed)

                            totalcase = totalcase + data.TotalConfirmed;
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(data.Country))
                        {
                            @Html.DisplayFor(modelItem => data.NewConfirmed)
                            newcase += data.NewConfirmed;
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(data.Country))
                        {
                            @Html.DisplayFor(modelItem => data.TotalDeaths)
                            totaldeaths += data.TotalDeaths;
                        }
                    </td>

                    <td>
                        @if (!string.IsNullOrEmpty(data.Country))
                        {
                            if (data.NewDeaths > 0)
                            {
                                <span class="myClass">@Html.DisplayFor(model => data.NewDeaths)</span>
                            }
                            else
                            {
                            @Html.DisplayFor(model => data.NewDeaths)
                            }
                            newdeaths += data.NewDeaths;
                        }
                    </td>

                    <td>
                        @if (!string.IsNullOrEmpty(data.Country))
                        {
                            @Html.DisplayFor(modelItem => data.TotalRecovered)
                            totalrecovered += data.TotalRecovered;
                        }
                    </td>

                    <td>
                        @if (!string.IsNullOrEmpty(data.Country))
                        {
                            @Html.DisplayFor(modelItem => data.NewRecovered)
                            newrecovered += data.NewRecovered;
                        }
                    </td>


                </tr>
            }
        }
    </tbody>


    @*<tr>
        <td>this api returns a country twice for some cases Total Country = @cntry</strong></td>

        <td>@totalcase</strong></td>
        <td>@newcase</strong></td>
        <td>@totaldeaths</strong></td>
        <td>@newdeaths</strong></td>
        <td>@totalrecovered</strong></td>
        <td>@newrecovered</strong></td>

    </tr>*@

</table>


@section scripts{
    @*<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>*@
    <script>

        $(document).ready(function () {

            //Here I used Data table plugin without no code you can
            //get features like pagination
            //steps to use datatable plugin
            //1. download datatable plugin from nuget
            //2. change bundle into bundleconfig
            //3. call datatable function here
            //hints see mosh's video section 7 client side development


            $("#header-fixed").DataTable();
        });

                // search into table
                //$(document).ready(function () {
                //    $("#myInput").on("keyup", function () {
                //        var value = $(this).val().toLowerCase();
                //        $("#myTable tr").filter(function () {
                //            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                //        });
                //    });
                //});


    </script>
}

